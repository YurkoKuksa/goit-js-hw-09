{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,kBACnCE,UAAWH,SAASC,cAAc,iBAClCG,YAAaJ,SAASC,cAAc,mBACpCI,OAAQL,SAASC,cAAc,WAQjC,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAkCb,SAASQ,IACP,MAAMC,EAAkBnB,EAAKI,WAAWgB,MAClCC,EAAiBrB,EAAKK,UAAUe,MAChCE,EAAmBtB,EAAKM,YAAYc,MAE1C,GACsB,KAApBD,GACmB,KAAnBE,GACqB,KAArBC,EACA,CACA,MAAMC,EAAoB,IAAIZ,SAAQC,IACpCA,EAAQY,OAAOL,GAAiB,IAG5BM,EAAmB,IAAId,SAAQC,IACnCA,EAAQY,OAAOH,GAAgB,IAG3BK,EAAqB,IAAIf,SAAQC,IACrCA,EAAQY,OAAOF,GAAkB,IAGnCX,QAAQgB,IAAI,CAACJ,EAAmBE,EAAkBC,IAC/CE,MAAK,EAAEC,EAAYC,EAAWC,MAC7B,MAAMC,EAAU,UAAUH,YAAqBC,cAAsBC,IACrEE,EAAAnC,GAASoC,OAAOC,KAAKH,EAAQ,IAE9BI,OAAMC,IACLJ,EAAAnC,GAASoC,OAAOI,QAAQ,UAAUD,IAAQ,G,EA5ElDrC,EAAKC,KAAKsC,iBAAiB,UAkB3B,SAAwBC,GACtBA,EAAIC,iBACSD,EAAIE,OACjB,IAAItC,EAAaoB,OAAOxB,EAAKI,WAAWgB,OACpCf,EAAYmB,OAAOxB,EAAKK,UAAUe,OAClCd,EAAckB,OAAOxB,EAAKM,YAAYc,OAE1C,IAAK,IAAIuB,EAAI,EAAGA,GAAKrC,EAAaqC,IAAK,CACrC,MAAMC,EAAuB1C,SAASC,cACpC,0BAEEyC,IACFA,EAAqBC,MAAMC,QAAU,QAGvCtC,EAAcmC,EAAGvC,GACdwB,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACjBuB,EAAAnC,GAASoC,OAAOa,QACd,uBAAqBtC,QAAiBC,MAAU,IAGnD0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAAnC,GAASoC,OAAOI,QACd,sBAAoB7B,QAAeC,MAAU,IAGnDN,GAAcC,C,KA3ClBL,EAAKI,WAAWmC,iBAAiB,QAASrB,GAC1ClB,EAAKK,UAAUkC,iBAAiB,QAASrB,GACzClB,EAAKM,YAAYiC,iBAAiB,QAASrB","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('[name=\"delay\"]'),\n  stepInput: document.querySelector('[name=\"step\"]'),\n  amountInput: document.querySelector('[name=\"amount\"]'),\n  button: document.querySelector('button'),\n};\n\nrefs.form.addEventListener('submit', toTargetSubmit);\nrefs.delayInput.addEventListener('input', toTargetInput);\nrefs.stepInput.addEventListener('input', toTargetInput);\nrefs.amountInput.addEventListener('input', toTargetInput);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction toTargetSubmit(evt) {\n  evt.preventDefault();\n  const form = evt.target;\n  let delayInput = Number(refs.delayInput.value);\n  let stepInput = Number(refs.stepInput.value);\n  let amountInput = Number(refs.amountInput.value);\n\n  for (let i = 1; i <= amountInput; i++) {\n    const existingNotification = document.querySelector(\n      '.notiflix-notification'\n    );\n    if (existingNotification) {\n      existingNotification.style.display = 'none';\n    }\n\n    createPromise(i, delayInput)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delayInput += stepInput;\n  }\n}\n// //////////////////////////////////////\nfunction toTargetInput() {\n  const delayInputValue = refs.delayInput.value;\n  const stepInputValue = refs.stepInput.value;\n  const amountInputValue = refs.amountInput.value;\n\n  if (\n    delayInputValue !== '' &&\n    stepInputValue !== '' &&\n    amountInputValue !== ''\n  ) {\n    const delayValuePromise = new Promise(resolve => {\n      resolve(Number(delayInputValue));\n    });\n\n    const stepValuePromise = new Promise(resolve => {\n      resolve(Number(stepInputValue));\n    });\n\n    const amountValuePromise = new Promise(resolve => {\n      resolve(Number(amountInputValue));\n    });\n\n    Promise.all([delayValuePromise, stepValuePromise, amountValuePromise])\n      .then(([delayValue, stepValue, amountValue]) => {\n        const message = `Delay: ${delayValue}, Step: ${stepValue}, Amount: ${amountValue}`;\n        Notiflix.Notify.info(message);\n      })\n      .catch(error => {\n        Notiflix.Notify.failure(`Error: ${error}`);\n      });\n  }\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","button","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$toTargetInput","delayInputValue","value","stepInputValue","amountInputValue","delayValuePromise","Number","stepValuePromise","amountValuePromise","all","then","delayValue","stepValue","amountValue","message","$parcel$interopDefault","Notify","info","catch","error","failure","addEventListener","evt","preventDefault","target","i","existingNotification","style","display","success"],"version":3,"file":"03-promises.0a8b7758.js.map"}